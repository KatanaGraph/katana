# Link-time reconfiguration via tsuba::Preload and tsuba::RegisterFileStorage
# is easiest to maintain if tsuba and its related libraries are always shared.
#
# Runtime customization of tsuba can be achieved in the standard ways, e.g.,
# - LD_PRELOAD=<my-lib>
#   where my-lib implements tsuba::Preload/tsuba::PreloadFini
# - Symbolically link libtsuba-preload.so to my-lib
# - Adjust LD_LIBRARY_PATH to include a directory, which has
#   libtsuba-preload.so that points to my-lib
add_library(tsuba-preload SHARED)
add_library(tsuba SHARED)

add_dependencies(lib tsuba tsuba-preload)

set(sources
  src/Errors.cpp
  src/FaultTest.cpp
  src/file.cpp
  src/FileFrame.cpp
  src/FileStorage.cpp
  src/FileView.cpp
  src/GlobalState.cpp
  src/HttpNameServerClient.cpp
  src/LocalStorage.cpp
  src/MemoryNameServerClient.cpp
  src/RDG.cpp
  src/tsuba.cpp
  src/WriteGroup.cpp
)

target_sources(tsuba PRIVATE ${sources})
target_sources(tsuba-preload PRIVATE src/Preload.cpp)

foreach(target tsuba tsuba-preload)
  target_include_directories(${target} PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:include>
  )
  target_compile_definitions(${target} PRIVATE GALOIS_SHARED_LIB_BUILDING)
endforeach()

target_link_libraries(tsuba-preload PUBLIC galois_support)
target_link_libraries(tsuba PUBLIC tsuba-preload galois_support)

find_package(Arrow CONFIG REQUIRED)
if(${ARROW_VERSION} VERSION_LESS 0.17 OR ${ARROW_VERSION} VERSION_GREATER_EQUAL 2.0.0)
  message(FATAL_ERROR "libarrow must be version 0.17 or 1.0; found ${ARROW_VERSION} instead")
endif()

get_filename_component(ARROW_CONFIG_DIR ${Arrow_CONFIG} DIRECTORY)
find_package(Parquet REQUIRED HINTS ${ARROW_CONFIG_DIR})
target_link_libraries(tsuba PUBLIC arrow_shared parquet_shared)

if(TARGET Boost::Boost)
  # Autogenerated conan module doesn't provide header-only target. Extract one
  # manually.
  get_target_property(include_dirs Boost::Boost INTERFACE_INCLUDE_DIRECTORIES)
  target_include_directories(tsuba PUBLIC ${include_dirs})
else()
  # Standard CMake Boost module
  target_link_libraries(tsuba PUBLIC Boost::boost)
endif()

install(
  DIRECTORY include/
  DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
  COMPONENT dev
  FILES_MATCHING PATTERN "*.h"
)

install(TARGETS tsuba tsuba-preload
  EXPORT GaloisTargets
  LIBRARY
    DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    COMPONENT lib
  ARCHIVE
    DESTINATION "${CMAKE_INSTALL_LIBDIR}"
    COMPONENT lib
  INCLUDES DESTINATION "${RELATIVE_INCLUDE_FROM_INSTALL_PREFIX}"
)
