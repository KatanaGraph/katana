{# Generate the initial declarations needed for the rest of the numba wrapper macros. #}
{% macro header() %}
import ctypes
from libc.stdint cimport uintptr_t

_numba_wrapper_tables = []

_numba_wrapper_c_type_to_ctypes_table = {
    "void": None,
    "uint64_t": ctypes.c_uint64,
    "int64_t": ctypes.c_int64,
    "uint32_t": ctypes.c_uint32,
    "int32_t": ctypes.c_int32,
    "uint16_t": ctypes.c_uint16,
    "int16_t": ctypes.c_int16,
    "bint": ctypes.c_bool,
    "float": ctypes.c_float,
    "double": ctypes.c_double,
}

def __numba_wrapper_c_type_to_ctypes(type_name):
    if type_name.endswith("*") or type_name.endswith(" dtype"):
        return ctypes.c_void_p
    return _numba_wrapper_c_type_to_ctypes_table[type_name]
{% endmacro %}

{% set numba_gen_state = namespace(found=false) -%}


{# Wrap a class with the specified Python name and C self type.
   This should be used with {% call numba.class_(...) %} with numba.method calls inside the call block. #}
{% macro class_(class_name, self_type, with_dtype=False) -%}
{% set numba_gen_state.class_name = class_name -%}
{% set numba_gen_state.self_type = self_type -%}
__numba_wrapper_table_{{class_name}} = []
_numba_wrapper_tables.append(({{class_name}}, {{with_dtype}}, __numba_wrapper_table_{{class_name}}))
{{caller()}}
del __numba_wrapper_table_{{class_name}}
{% set numba_gen_state.class_name = None -%}
{% set numba_gen_state.self_type = None -%}
{%- endmacro -%}


{% macro convert_dtype_type(type) -%}
{%- if type.endswith(" dtype") -%}
    {{type[:-6]}}*
{%- else -%}
    {{type}}
{%- endif -%}
{%- endmacro %}


{% macro method_with_body(func_name, return_type, argument_types, underlying_func_name=None) -%}
{% set class_name = numba_gen_state.class_name -%}
{% set self_type = numba_gen_state.self_type -%}
{% set mangled_func_name %}__numba_wrapper_{{class_name}}_{{func_name}}{% endset %}
{% if not underlying_func_name -%}
{% set underlying_func_name = func_name -%}
{% endif -%}
cdef api {{convert_dtype_type(return_type)}} {{mangled_func_name}}({{self_type}} *self{% for typ in argument_types %}, {{convert_dtype_type(typ)}} arg{{loop.index}}{% endfor %}) nogil:
{{caller()}}
__numba_wrapper_table_{{class_name}}.append(
    ("{{func_name}}",
     ctypes.CFUNCTYPE(__numba_wrapper_c_type_to_ctypes("{{return_type}}"),
                      __numba_wrapper_c_type_to_ctypes("{{self_type}} *"),
         {% for typ in argument_types %}{{ ", " if not loop.first }}__numba_wrapper_c_type_to_ctypes("{{typ}}"){% endfor %}),
     "{{mangled_func_name}}",
     <uintptr_t>&{{mangled_func_name}},
           ({%- for typ in argument_types %}{{ ", " if not loop.first }}{{typ.endswith(" dtype")}}{% endfor %}{{"," if argument_types|length == 1}})))
{%- endmacro %}


{# Wrap a method for numba. This should only be called inside a call block as discussed in the documentation of class_. #}
{% macro method(func_name, return_type, argument_types, underlying_func_name=None) -%}
{% set class_name = numba_gen_state.class_name -%}
{% set self_type = numba_gen_state.self_type -%}
{% set mangled_func_name %}__numba_wrapper_{{class_name}}_{{func_name}}{% endset -%}
{% if not underlying_func_name -%}
{% set underlying_func_name = func_name -%}
{% endif -%}
cdef api {{convert_dtype_type(return_type)}} {{mangled_func_name}}({{self_type}} *self{% for typ in argument_types %}, {{convert_dtype_type(typ)}} arg{{loop.index}}{% endfor %}) nogil:
    {% if return_type != "void" %}return {% endif %}self.{{underlying_func_name}}(
      {%- for typ in argument_types %}{{ ", " if not loop.first }} arg{{loop.index}}{{"[0]" if typ.endswith(" dtype")}}{% endfor %})
__numba_wrapper_table_{{class_name}}.append(
    ("{{func_name}}",
     ctypes.CFUNCTYPE(__numba_wrapper_c_type_to_ctypes("{{return_type}}"),
                      __numba_wrapper_c_type_to_ctypes("{{self_type}} *"),
         {% for typ in argument_types %}{{ ", " if not loop.first }}__numba_wrapper_c_type_to_ctypes("{{typ}}"){% endfor %}),
     "{{mangled_func_name}}",
         <uintptr_t>&{{mangled_func_name}},
           ({%- for typ in argument_types %}{{ ", " if not loop.first }}{{typ.endswith(" dtype")}}{% endfor %}{{"," if argument_types|length == 1}})))
{%- endmacro %}


{# Emit code to actually register all the numba wrappers with numba. #}
{% macro register_all_wrappers() -%}
import katana.numba_support.wrappers
katana.numba_support.wrappers.interpret_numba_wrapper_tables(_numba_wrapper_tables, globals())
{% endmacro -%}


{% macro build_numba_type_dict(base_type, with_dtype) -%}
import katana.util.template_type
cdef _make_{{base_type}}_numba_type():
    numba_type = katana.util.template_type.DtypeDict{{"WithOpaque" if with_dtype}}()
    {% for inst in type_instantiations -%}
    numba_type[{{inst.type_key}}] = globals()["{{base_type}}_{{inst.type_scab}}_numba_type"]
    {% endfor -%}
    return numba_type
{{base_type}}_numba_type = _make_{{base_type}}_numba_type()
{% endmacro -%}


{% macro wrap_all_instances(base_type, wrap_macro, with_dtype) -%}
{%- if wrap_macro %}
{%- for inst in type_instantiations %}
{{wrap_macro(inst)}}
{% endfor -%}
{% endif -%}
cdef _make_{{base_type}}_type():
    types = {}
    {% for inst in type_instantiations -%}
    types[{{inst.type_key}}] = {{base_type}}_{{inst.element_c_type}}
    {% endfor -%}
    return make_template_type1{{"_with_opaque" if with_dtype}}("{{base_type}}", types)
{{base_type}} = _make_{{base_type}}_type()
{%- endmacro %}
