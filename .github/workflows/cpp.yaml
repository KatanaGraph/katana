name: C/C++ CI

on:
  push:
    branches:
    - master
  pull_request:

jobs:
# Canceling other workflows doesn't work on the open repo because it requires write permissions.
#  cancel_previous:
#    runs-on: ubuntu-latest
#    steps:
#    - uses: styfle/cancel-workflow-action@0.6.0
#      if: ${{ github.event_name == 'pull_request' }}
#      with:
#        access_token: ${{ github.token }}

  ###################################################################
  # lint
  ###################################################################
  lint:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
        - ubuntu-18.04
        build_type:
        - Debug
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    ###
    # Caching between builds
    ###
    - name: Cache conan packages
      uses: actions/cache@v2
      with:
        key: ${{matrix.os}}-conan-${{hashFiles('config/conanfile.py')}}
        path: ~/.conan/data

    ###
    # Install platform-level dependencies (OS-specific)
    ###
    - name: Install dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo .github/workflows/setup_ubuntu.sh
    - name: Pre-build
      run: mkdir -p $HOME/build
    - name: Install C++ dependencies
      run: |
        [[ -f ~/.profile ]] && source ~/.profile
        .github/workflows/setup_conan.sh
        conan remove --locks
        # try to install, but if it doesn't work try to rebuild from scratch
        # because changes to conan flags can cause it to get stuck
        conan install -if $HOME/build --build=missing config || \
          (rm -rf ~/.conan && .github/workflows/setup_conan.sh && \
             conan install -if $HOME/build --build=missing config)

    - name: Check formating
      run: CLANG_FORMAT=clang-format-10 scripts/check_format.sh .

    - name: Check general text formatting
      run: |
        scripts/check_general_text_format.py lib* python/ config

    - name: Check guards
      run: |
        scripts/check_ifndefs.py --root=$PWD lib*

    - name: Check docs
      run: |
        cmake -S . -B $HOME/build \
          -DCMAKE_TOOLCHAIN_FILE=$HOME/build/conan_paths.cmake
        CHECK_DOCS=$(pwd)/scripts/check_docs.sh
        cd $HOME/build && $CHECK_DOCS

  ###################################################################
  # build_and_test
  ###################################################################
  build_and_test:
    runs-on: ${{matrix.os}}
    continue-on-error: ${{matrix.os == 'macOS-latest'}}
    strategy:
      matrix:
        os:
        - ubuntu-18.04
        - macOS-latest
        build_type:
        - Debug
        - Release
        - Sanitizer
        - Shared
        cxx:
        - g++
        - g++-9
        - clang++-10
        # Only build and test the following configurations a subset of
        # configurations to reduce the total number of concurrent jobs.
        #
        # The key "include" exists but only allows for the refinement of an
        # existing matrix "job" (i.e., point in the product space) by adding
        # more variables. Fallback to "exclude".
        exclude:
            # MacOS ({g++} {Debug,Shared})
        - os: macOS-latest
          cxx: clang++-10
        - os: macOS-latest
          cxx: g++-9
        - os: macOS-latest
          build_type: Sanitizer
        - os: macOS-latest
          build_type: Release
            # Ubuntu ({g++-9,clang++-10} [most])
        - os: ubuntu-18.04
          cxx: g++
        - os: ubuntu-18.04
          build_type: Sanitizer
          cxx: g++-9
        - os: ubuntu-18.04
          build_type: Debug
          cxx: clang++-10
        - os: ubuntu-18.04
          build_type: Shared
          cxx: clang++-10
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    ###
    # Caching between builds
    ###
    - name: Cache conan packages
      uses: actions/cache@v2
      with:
        key: ${{matrix.os}}-conan-${{hashFiles('config/conanfile.py')}}
        path: ~/.conan/data
    - name: Cache ccache objects
      uses: actions/cache@v2
      with:
        key: ${{matrix.os}}-${{matrix.build_type}}-${{matrix.cxx}}-ccache-${{github.sha}}
        restore-keys: |
          ${{matrix.os}}-${{matrix.build_type}}-${{matrix.cxx}}-ccache-
        path: ~/.ccache

    ###
    # Install platform-level dependencies (OS-specific)
    ###
    - name: Install dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo .github/workflows/setup_ubuntu.sh
    - name: Install dependencies
      if: startsWith(matrix.os, 'macOS-')
      run: |
        .github/workflows/setup_macos.sh
    - name: Install C++ dependencies
      run: |
        [[ -f ~/.profile ]] && source ~/.profile
        .github/workflows/setup_conan.sh
        conan remove --locks
        # try to install, but if it doesn't work try to rebuild from scratch
        # because changes to conan flags can cause it to get stuck
        conan install -if $HOME/build --build=missing config || \
          (rm -rf ~/.conan && .github/workflows/setup_conan.sh && \
             conan install -if $HOME/build --build=missing config)

    - name: Setup ccache
      run: |
        ccache --max-files 400  # Roughly two builds worth of objects

    ###
    # Standard CMake build process
    ###
    - name: Configure
      run: |
        case ${{matrix.os}} in
          macOS-*) export PATH=$PATH:/usr/local/opt/llvm/bin ;;
          *) ;;
        esac

        CXX="${{matrix.cxx}}"

        VER="${CXX/*-/}"
        if [[ "$VER" == "$CXX" ]]; then
          VER=""
        else
          VER="-$VER"
        fi

        case "$CXX" in
          clang*) CC=clang ;;
          g*)     CC=gcc   ;;
        esac

        CC="${CC}${VER}"

        case ${{matrix.build_type}} in
          Release)
            BUILD_TYPE=Release
            SANITIZER=""
            SHARED=""
            ;;
          Sanitizer)
            BUILD_TYPE=Release
            SANITIZER="Address;Undefined"
            SHARED=""
            ;;
          Debug)
            BUILD_TYPE=Debug
            SANITIZER=""
            SHARED=""
            ;;
          Shared)
            BUILD_TYPE=Release
            SANITIZER=""
            SHARED="ON"
            ;;
          *)
            echo Unknown build type: ${{matrix.build_type}}
            exit 1
            ;;
        esac

        cmake -S . -B $HOME/build \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_TOOLCHAIN_FILE=$HOME/build/conan_paths.cmake \
          -DCMAKE_CXX_COMPILER="$CXX" \
          -DCMAKE_C_COMPILER="$CC" \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DGALOIS_USE_SANITIZER="$SANITIZER" \
          -DBUILD_SHARED_LIBS="$SHARED" \
          -DGALOIS_FORCE_NON_STATIC="$SHARED"

    - name: Build
      run: |
        ccache --zero-stats
        cmake --build $HOME/build --parallel 2
        ccache --show-stats
        ccache --cleanup

    - name: Install
      run: DESTDIR=/tmp cmake --install $HOME/build

    - name: Test
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        export AWS_EC2_METADATA_DISABLED=true
        # Default timeout is 1500 seconds. Quick tests should not take more
        # than a few seconds typically.
        cd $HOME/build && ctest -V --label-regex quick --parallel 2 --timeout 350

    # MacOS tests seem to run into CI host level failures that are hard to
    # reproduce locally. Rerun them for now.
    - name: Test
      # Disable macOS tests because they take up to 10X longer than ubuntu
      # tests due to a yet undiagnosed performance issue.
      if: startsWith(matrix.os, 'macOS-') && false
      run: |
        export AWS_EC2_METADATA_DISABLED=true
        cd $HOME/build && ctest -V --label-regex quick --parallel 1 --repeat until-pass:2 --timeout 350
