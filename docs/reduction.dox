/**

@page reduction Reduction Operations

\tableofcontents

@section reduction_intro Introduction

Reduction is a fundamental operation used in different graph analytics problems such as bread-first search (BFS), connected components (CC), and PageRank (PR). As such, the Galois runtime provides support for different types of reduction operations such as addition (also known as accumulation).

Data structures that support reductions in Galois are conceptually divided into two classes: reduction of scalar types (e.g., ints and floats) or reduction of container types (e.g., STL vectors and maps). 

@section scalar-reduction Scalar Reduction

{@link katana::Reducible} is the base class to help reduce values of
primitive types or types that are cheap to copy. For example, {@link katana::GAccumulator}
is for accumulating values of types such as ints.

@subsection scalar-define Defining a Reducer

{@link katana::Reducible} is used to reduce mutliple values of type `T` to a
single value. It is optimized for basic types or types that have low overheads
while copying. {@link katana::Reducible} takes the type `T` of the
values to be reduced and a functor `MergeFunc` as template parameters, where the
`MergeFunc` conforms to:

@code
    T operator()(const T& a, const T& b);
@endcode

@subsection scalar-reduce Reducing Values

{@link katana::Reducible} starts with the default value of type `T`. {@link katana::Reducible::update()} updates the thread local value by applying the reduction operator to the thread local and provided value. After a parallel region, the final value can be retrieved using {@link katana::Reducible::reduce()}. Note, that {@link katana::Reducible::reduce()} can only be used outside of parallel regions (e.g., {@link katana::for_each}).

The following figure shows the inheritance hierarachy of Galois classes that implement support for scalar reduction operations.

\htmlonly <style>div.image img[src="scalar-reductions.png"]{width:700px;}</style> \endhtmlonly
\image html scalar-reductions.png "Scalar reducers in Galois"

These specialized reducer classes implement support for different types of reduction operations by inheriting from {@link katana::Reducible}:

- {@link katana::GAccumulator} is used to accumulate a set of values. It provides {@link katana::GAccumulator::operator+=} and {@link katana::GAccumulator::operator-=} for adding or subtracting values.
- {@link katana::GReduceMax} is used to reduce to the maximum value. Type `T` has to meet the type requirements of `std::max`.
- {@link katana::GReduceMin} is used to reduce to the minimum value. Type `T` has to meet the type requirements of `std::min`.
- {@link katana::GReduceLogicalAnd} is used to perform a `logical and` of the accumulated values. Type `T` has to meet the type requirements of `std::logical_and`.
- {@link katana::GReduceLogicalOr} is used to perform a `logical or` of the accumulated values. Type `T` has to meet the type requirements of `std::logical_or`.

@subsection scalar-example Example

In the following, we show an example of using reduction operations in a common graph analytics application, PageRank. The residual pull-based algorithm for PageRank uses {@link katana::GAccumulator} to keep track of whether a node with outgoing neighbors has new PageRank contribution that needs to be propagated. The PageRank computation can terminate if the reduced value across all nodes in the graph is zero (i.e., implying no more work).

@snippet lonestar/analytics/cpu/pagerank/PageRank-pull.cpp scalarreduction

<br>
*/
