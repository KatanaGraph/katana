"""
This module provides atomic values and atomic operations on numpy arrays.
The atomic values are instantiated for several element types, but cannot support custom element types.
Atomic operations on numpy arrays support integer and floating point arrays.

The instantiations are:

{% for inst in primitive_type_instantiations -%}
* `{{inst.element_py_type}}` (with C element type {{inst.element_c_type}})
{% endfor %}

The instantiation is selected by indexing the type, for example `ReduceSum[int]` or `ReduceMin[np.uint64]`.

"""

# {{generated_banner()}}

import numpy as np
from katana.native_interfacing.template_type import make_template_type1
from katana.cpp.libgalois cimport atomic
from libc.stdint cimport uintptr_t
from katana.native_interfacing.numpy_atomic import atomic_add, atomic_sub, atomic_min, atomic_max

{{type_instantiation_imports}}

__all__ = [
    "ReduceSum",
    "ReduceMax",
    "ReduceMin",
    "ReduceLogicalOr",
    "ReduceLogicalAnd",
    "atomic_add",
    "atomic_sub",
    "atomic_max",
    "atomic_min"
    ]

{% import "native_interfacing/numba_wrapper_support.jinja" as numba %}

{{numba.header()}}

{% macro wrap_reducible(name, element_type, is_template, english_operator, c_name) %}
{% if is_template -%}
{% set underlying_type %}atomic.{{c_name}}[{{element_type}}]{% endset -%}
{% set class_name %}{{name}}_{{element_type}}{% endset -%}
{% else -%}
{% set underlying_type %}atomic.{{c_name}}{% endset -%}
{% set class_name %}{{name}}{% endset -%}
{% endif -%}
cdef class {{class_name}}:
    """
    A reducer object that can updated with new values and combines the results efficiently using {{english_operator}}.

    This class can be passed into numba compiled code and it's methods can be used from there.

    (This class wraps the underlying C++ type {{name}}.)
    """
    cdef {{underlying_type}} underlying

    def __init__(self, v=None):
        """
        __init__(self, v=None)

        Create a {{name}}. If `v` is provided and is not None, then initialize the reducer to `v`.
        """
        if v is not None:
            self.update(v)

    def update(self, {{element_type}} v):
        """
        update(self, v)

        Update this reducer with `v` performing the operation.
        """
        self.underlying.update(v)

    def reset(self):
        """
        reset(self)

        Reset the reducer to zero.

        This must only be called from single threaded code.
        """
        self.underlying.reset()

    def reduce(self):
        """
        reduce(self)

        Get the current value of the reducer.

        This must only be called from single threaded code.
        """
        return self.underlying.reduce()

    def get_local(self):
        """
        get_local(self)

        Get a sub-result of the reducers operation. This is generally the reduced value for this thread.
        """
        return self.underlying.getLocal()

    @property
    def __katana_address__(self):
        return <uintptr_t>&self.underlying

{% call numba.class_(class_name, underlying_type) %}
{{numba.method("update", "void", [element_type])}}
{{numba.method("reset", "void", [])}}
{{numba.method("reduce", element_type, [])}}
{{numba.method("get_local", element_type, [], "getLocal")}}
{% endcall %}
{% endmacro %}

{% for reducible, c_name, english_operator in [("ReduceSum", "GAccumulator", "addition"),
                                               ("ReduceMax", "GReduceMax", "maximum"),
                                               ("ReduceMin", "GReduceMin", "minimum")] %}
_{{reducible}}_types = {}
{% for inst in primitive_type_instantiations %}
{{wrap_reducible(reducible, inst.element_c_type, True, english_operator, c_name)}}
_{{reducible}}_types[{{inst.element_py_type}}] = {{reducible}}_{{inst.type_scab}}
{% endfor %}
{{reducible}} = make_template_type1("{{reducible}}", _{{reducible}}_types)
{% endfor %}

{% for reducible, english_operator in [("ReduceLogicalAnd", "logical and"),
                                       ("ReduceLogicalOr", "logical or")] %}
{{wrap_reducible(reducible, "bint", False, english_operator, "G" + reducible)}}
{% endfor %}

{{numba.register_all_wrappers()}}
