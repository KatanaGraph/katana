name: C/C++ CI

on:
  push:
    branches:
      - 'master'
      - 'release/*'
  pull_request:

# Cancel any previous runs with the same key.
concurrency:
  # Example key: Repository Structure CI-refs/pull/1381/merge
  #   or Repository Structure CI-<owner>-<sha> for pushes
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.ref || format('{0}-{1}', github.repository_owner, github.sha) }}
  cancel-in-progress: true

jobs:
  do_cpp:
    if: |
      github.event_name != 'pull_request' ||
      (
        !contains(github.event.pull_request.body, '[no C++]')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Info
        run: echo "will build"

  do_cpp_test:
    needs:
      - do_cpp
    if: |
      github.event_name != 'pull_request' ||
      (
        !contains(github.event.pull_request.body, '[no test]') &&
        !contains(github.event.pull_request.body, '[no C++ test]')
      )
    runs-on: ubuntu-latest
    steps:
      - name: Info
        run: echo "will build"

  ###################################################################
  # lint
  ###################################################################
  lint:
    needs: do_cpp
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os:
        - ubuntu-18.04
        build_type:
        - Debug
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        # We need history so that we have tags to provide version information.
        fetch-depth: 0
        # 0 fetches all history. See https://github.com/actions/checkout#checkout-v2

    ###
    # Caching between builds
    ###
    - name: Cache conan packages
      uses: actions/cache@v2
      with:
        key: ${{matrix.os}}-conan-${{hashFiles('config/conanfile.py')}}
        path: ~/.conan/data

    ###
    # Install platform-level dependencies (OS-specific)
    ###
    - name: Install dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo scripts/setup_ubuntu.sh
    - name: Pre-build
      run: mkdir -p $HOME/build
    - name: Install C++ dependencies
      run: .github/workflows/setup_conan_install.sh $HOME/build

    - name: Check formating
      run: CLANG_FORMAT=clang-format-10 scripts/check_cpp_format.sh .

    - name: Check general text formatting
      run: |
        scripts/check_general_text_format.py lib* python/ config

    - name: Check guards
      run: |
        scripts/check_ifndefs.py --root=$PWD lib*

    - name: Check docs
      run: .github/workflows/check_docs.sh $HOME/build

  ###################################################################
  # build_and_test
  ###################################################################
  build_and_test:
    needs: do_cpp_test
    runs-on: ${{matrix.os}}
    continue-on-error: ${{matrix.os == 'macOS-latest'}}
    strategy:
      matrix:
        os:
        - ubuntu-18.04
        # - macOS-latest
        build_type:
        - Debug
        - Release
        - Sanitizer
        cxx:
        - g++
        - g++-9
        - clang++-10
        - clang++-12
        # Only build and test the following configurations a subset of
        # configurations to reduce the total number of concurrent jobs.
        #
        # The key "include" exists but only allows for the refinement of an
        # existing matrix "job" (i.e., point in the product space) by adding
        # more variables. Fallback to "exclude".
        exclude:
            # MacOS ({g++} {Debug,Shared})
        - os: macOS-latest
          cxx: clang++-10
        - os: macOS-latest
          cxx: clang++-12
        - os: macOS-latest
          cxx: g++-9
        - os: macOS-latest
          build_type: Sanitizer
        - os: macOS-latest
          build_type: Release
            # Ubuntu ({g++-9,clang++-10} [most])
        - os: ubuntu-18.04
          build_type: Sanitizer
          cxx: g++
        - os: ubuntu-18.04
          build_type: Sanitizer
          cxx: g++-9
        - os: ubuntu-18.04
          build_type: Debug
          cxx: clang++-10
        - os: ubuntu-18.04
          build_type: Debug
          cxx: clang++-12
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        # We need history so that we have tags to provide version information.
        fetch-depth: 0
        # 0 fetches all history. See https://github.com/actions/checkout#checkout-v2

    ###
    # Caching between builds
    ###
    - name: Cache conan packages
      uses: actions/cache@v2
      with:
        key: ${{matrix.os}}-conan-${{hashFiles('config/conanfile.py')}}
        path: ~/.conan/data
    - name: Cache ccache objects
      uses: actions/cache@v2
      with:
        key: ${{matrix.os}}-${{matrix.build_type}}-${{matrix.cxx}}-ccache-${{github.sha}}
        restore-keys: |
          ${{matrix.os}}-${{matrix.build_type}}-${{matrix.cxx}}-ccache-
        path: ~/.ccache

    ###
    # Install platform-level dependencies (OS-specific)
    ###
    - name: Install dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo scripts/setup_ubuntu.sh
    - name: Install dependencies
      if: startsWith(matrix.os, 'macOS-')
      run: scripts/setup_macos.sh
    - name: Install C++ dependencies
      run: .github/workflows/setup_conan_install.sh $HOME/build

    - name: Setup ccache
      run: |
        .github/workflows/configure_ccache.sh
        ccache --max-files 350 --max-size=1.5G # Roughly two builds worth of objects, and limited in size as a safety net.
        ccache --zero-stats

    ###
    # Standard CMake build process
    ###
    - name: Configure
      run: |
        GPU_ARGS=()
        GPU_ARGS+=("-DCMAKE_CUDA_COMPILER_LAUNCHER=ccache")
        GPU_ARGS+=("-DCMAKE_CUDA_ARCHITECTURES=75")
        GPU_ARGS+=("-DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc")
        if [ "${{matrix.build_type}}" == "Sanitizer" ]; then
          GPU_ARGS+=("-DCMAKE_LINKER=${{matrix.cxx}}")
        fi
        .github/workflows/configure_cpp.sh \
          ${{matrix.os}} ${{matrix.cxx}} ${{matrix.build_type}} $HOME/build \
          "${GPU_ARGS[@]}"

    - name: Build
      run: |
        export CUDA_HOME=/usr/local/cuda
        export C_INCLUDE_PATH=${CUDA_HOME}/include:${C_INCLUDE_PATH}
        export LIBRARY_PATH=${CUDA_HOME}/lib64:$LIBRARY_PATH
        cmake --build $HOME/build --parallel 2

    - name: Clean ccache
      run: |
        ccache --show-stats
        ccache --cleanup

    - name: Install
      run: DESTDIR=/tmp cmake --install $HOME/build

    - name: Test
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        export AWS_EC2_METADATA_DISABLED=true
        # Default timeout is 1500 seconds. Quick tests should not take more
        # than a few seconds typically.
        cd $HOME/build && ctest --output-on-failure --label-regex quick --parallel 2 --timeout 350

    # MacOS tests seem to run into CI host level failures that are hard to
    # reproduce locally. Rerun them for now.
    - name: Test
      # Disable macOS tests because they take up to 10X longer than ubuntu
      # tests due to a yet undiagnosed performance issue.
      if: startsWith(matrix.os, 'macOS-') && false
      run: |
        export AWS_EC2_METADATA_DISABLED=true
        cd $HOME/build && ctest --output-on-failure --label-regex quick --parallel 1 --repeat until-pass:2 --timeout 350
